import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { searchSimilar, getCollectionStats } from '@/lib/vectorStore';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || 'your-api-key-here'
});

export async function POST(request: NextRequest) {
  try {
    const { message, limit = 3, responseLength = 'medium' } = await request.json();

    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Brak wiadomo≈õci do przetworzenia' },
        { status: 400 }
      );
    }

    console.log(`\nüîç ===== RAG CHAT REQUEST =====`);
    console.log(`üìù Pytanie: "${message}"`);
    console.log(`üéØ Threshold podobie≈Ñstwa: 0.3`);
    console.log(`üìä Limit wynik√≥w: ${limit}`);

    // 1. Wyszukaj podobne tre≈õci w ChromaDB z threshold
    let context = '';
    let searchResults = [];
    let responseSource = 'openai'; // 'database', 'hybrid', 'openai'
    const SIMILARITY_THRESHOLD = 0.3; // Minimum similarity score (lowered from 0.6)
    
    try {
      searchResults = await searchSimilar(message, Math.max(limit, 5)); // Pobierz co najmniej 5 wynik√≥w do logowania
      
      console.log(`üìä Znaleziono ${searchResults.length} wynik√≥w w bazie`);
      
      if (searchResults.length > 0) {
        // Loguj top 5 wynik√≥w z similarity scores
        console.log(`üìà TOP 5 WYNIK√ìW Z CHROMADB:`);
        const topResults = searchResults.slice(0, 5);
        topResults.forEach((result, index) => {
          const isRelevant = result.similarity >= SIMILARITY_THRESHOLD;
          const contentPreview = result.content.substring(0, 80) + '...';
          console.log(`  ${index + 1}. [${result.metadata.type}] ${(result.similarity * 100).toFixed(1)}% ${isRelevant ? '‚úÖ' : '‚ùå'}`);
          console.log(`      Content: "${contentPreview}"`);
          console.log(`      File: ${result.metadata.filename || 'unknown'}`);
        });
        
        // Threshold check
        const maxSimilarity = Math.max(...searchResults.map(r => r.similarity));
        const passedThreshold = searchResults.filter(r => r.similarity >= SIMILARITY_THRESHOLD);
        
        console.log(`üéØ THRESHOLD CHECK:`);
        console.log(`   Threshold: ${SIMILARITY_THRESHOLD} (${(SIMILARITY_THRESHOLD * 100).toFixed(1)}%)`);
        console.log(`   Max similarity: ${maxSimilarity.toFixed(3)} (${(maxSimilarity * 100).toFixed(1)}%)`);
        console.log(`   Passed threshold: ${passedThreshold.length}/${searchResults.length} wynik√≥w`);
        
        // Filtruj wyniki wed≈Çug threshold podobie≈Ñstwa
        const relevantResults = searchResults.filter(result => result.similarity >= SIMILARITY_THRESHOLD);
        
        if (relevantResults.length > 0) {
          context = relevantResults
            .map((result, index) => 
              `≈πr√≥d≈Ço ${index + 1} (${result.metadata.type}, podobie≈Ñstwo: ${(result.similarity * 100).toFixed(1)}%):\n${result.content}\n`
            )
            .join('\n');
          
          // Decyzja: database/hybrid/openai
          if (relevantResults.length === searchResults.length) {
            responseSource = 'database';
            console.log(`üéØ DECYZJA: DATABASE (wszystkie wyniki przesz≈Çy threshold)`);
          } else {
            responseSource = 'hybrid';
            console.log(`üéØ DECYZJA: HYBRID (${relevantResults.length}/${searchResults.length} wynik√≥w przesz≈Ço threshold)`);
          }
          
          console.log(`‚úÖ Wybrano ${relevantResults.length} wysokiej jako≈õci tre≈õci`);
        } else {
          console.log(`‚ùå DECYZJA: OPENAI (≈ºaden wynik nie przeszed≈Ç threshold)`);
          console.log(`   Najwy≈ºsze podobie≈Ñstwo: ${maxSimilarity.toFixed(3)} (${(maxSimilarity * 100).toFixed(1)}%)`);
        }
      } else {
        console.log('‚ùå Brak podobnych tre≈õci w bazie danych');
        console.log(`üéØ DECYZJA: OPENAI (brak wynik√≥w)`);
      }
    } catch (searchError) {
      console.error('‚ùå B≈ÇƒÖd wyszukiwania w ChromaDB:', searchError);
      console.log(`üéØ DECYZJA: OPENAI (b≈ÇƒÖd wyszukiwania)`);
      // Kontynuuj bez kontekstu je≈õli wyszukiwanie siƒô nie powiedzie
    }

    // 2. Przygotuj smart prompt z kontekstem
    const hasContext = context.length > 0;
    
    // Determine response length instructions
    let lengthInstruction = '';
    switch (responseLength) {
      case 'short':
        lengthInstruction = 'Odpowiadaj BARDZO ZWIƒò≈πLE (2-3 zdania maksymalnie).';
        break;
      case 'detailed':
        lengthInstruction = 'Mo≈ºesz udzieliƒá pe≈Çnej, szczeg√≥≈Çowej odpowiedzi.';
        break;
      default: // 'medium'
        lengthInstruction = 'Odpowiadaj ZWIƒò≈πLE (3-5 zda≈Ñ maksymalnie).';
    }

    let systemPrompt = `Jeste≈õ ekspertem siatk√≥wki w VolleyInsight. 

ZASADY ODPOWIEDZI:
- Odpowiadaj KONKRETNIE i ZWIƒò≈πLE (3-5 zda≈Ñ max)
- U≈ºywaj bullet points dla list element√≥w
- Kr√≥tkie paragrafy (max 2-3 zdania ka≈ºdy)
- Struktura: G≈Ç√≥wna odpowied≈∫ ‚Üí Opcjonalne detale

FORMATOWANIE:
- Numerowane listy dla krok√≥w (1. 2. 3.)
- Bullet points (‚Ä¢) dla cech/element√≥w
- Pogrubienie dla kluczowych termin√≥w
- Podzia≈Ç na sekcje tylko gdy niezbƒôdne

PRZYK≈ÅAD DOBREJ ODPOWIEDZI:
"Blok wymaga trzech kluczowych element√≥w:
- Pozycja: stopy na szeroko≈õƒá bark√≥w, kolana lekko ugiƒôte
- Timing: skok dok≈Çadnie w momencie uderzenia przez atakujƒÖcego
- Rƒôce: maksymalnie wyciƒÖgniƒôte, palce rozstawione

Kluczowy jest timing - za wcze≈õnie lub za p√≥≈∫no znaczƒÖco obni≈ºa skuteczno≈õƒá."

UNIKAJ:
- Rozwlek≈Çych wprowadze≈Ñ
- Powtarzania oczywisto≈õci
- Nadmiernych wyja≈õnie≈Ñ
- D≈Çugich akapit√≥w bez podzia≈Çu

${lengthInstruction}

${hasContext ? 'Bazuj na kontek≈õcie z bazy wiedzy.' : 'U≈ºywaj wiedzy eksperckiej.'}`;

    // Smart prompt logic based on response source
    if (responseSource === 'database') {
      systemPrompt += `\n\nKONTEKST Z BAZY WIEDZY VOLLEYINSIGHT:
${context}

U≈ºyj powy≈ºszego kontekstu jako g≈Ç√≥wnego ≈∫r√≥d≈Ça informacji. Odpowiadaj na podstawie tych materia≈Ç√≥w, dodajƒÖc swoje eksperckie komentarze.`;
    } else if (responseSource === 'hybrid') {
      systemPrompt += `\n\nKONTEKST Z BAZY WIEDZY VOLLEYINSIGHT (czƒô≈õciowo odpowiedni):
${context}

U≈ºyj powy≈ºszego kontekstu jako punktu wyj≈õcia, ale uzupe≈Çnij odpowied≈∫ swojƒÖ wiedzƒÖ eksperckƒÖ o siatk√≥wce.`;
    } else {
      systemPrompt += `\n\nNie masz dostƒôpu do bazy wiedzy VolleyInsight, wiƒôc odpowiadaj na podstawie swojej wiedzy eksperckiej o siatk√≥wce.`;
    }

    // 3. Generuj odpowied≈∫ u≈ºywajƒÖc OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: message
        }
      ],
      max_tokens: 1000,
      temperature: 0.7,
    });

    const response = completion.choices[0]?.message?.content || 'Przepraszam, nie mogƒô wygenerowaƒá odpowiedzi.';

    // 4. Przygotuj smart response z metadanymi
    const responseData = {
      success: true,
      message: response,
      context: {
        hasContext: context.length > 0,
        responseSource: responseSource,
        responseLength: responseLength,
        sourcesCount: searchResults.length,
        relevantSourcesCount: searchResults.filter(r => r.similarity >= SIMILARITY_THRESHOLD).length,
        similarityThreshold: SIMILARITY_THRESHOLD,
        sources: searchResults.map(result => ({
          type: result.metadata.type,
          filename: result.metadata.filename,
          similarity: result.similarity,
          isRelevant: result.similarity >= SIMILARITY_THRESHOLD,
          content: result.content.substring(0, 100) + '...'
        }))
      },
      timestamp: new Date().toISOString()
    };

    console.log(`\n‚úÖ ODPOWIED≈π WYGENEROWANA:`);
    console.log(`   D≈Çugo≈õƒá: ${response.length} znak√≥w`);
    console.log(`   ≈πr√≥d≈Ço: ${responseSource.toUpperCase()}`);
    console.log(`   Typ: ${responseLength.toUpperCase()}`);
    console.log(`   Kontekst: ${context.length} znak√≥w`);
    console.log(`   Wykorzystane ≈∫r√≥d≈Ça: ${responseData.context.relevantSourcesCount}/${responseData.context.sourcesCount}`);
    console.log(`===== KONIEC RAG REQUEST =====\n`);
    
    return NextResponse.json(responseData);

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd API chat:', error);
    
    return NextResponse.json(
      {
        success: false,
        error: 'B≈ÇƒÖd podczas generowania odpowiedzi',
        details: error instanceof Error ? error.message : 'Nieznany b≈ÇƒÖd',
        message: 'Przepraszam, wystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania Twojego pytania. Spr√≥buj ponownie.'
      },
      { status: 500 }
    );
  }
}

// GET endpoint do sprawdzenia statusu
export async function GET() {
  try {
    const stats = await getCollectionStats();
    
    return NextResponse.json({
      success: true,
      status: 'RAG Chat API dzia≈Ça',
      database: {
        connected: true,
        totalChunks: stats?.totalChunks || 0,
        types: stats?.typeDistribution || {}
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        status: 'RAG Chat API - b≈ÇƒÖd po≈ÇƒÖczenia z bazƒÖ danych',
        error: error instanceof Error ? error.message : 'Nieznany b≈ÇƒÖd'
      },
      { status: 500 }
    );
  }
}

